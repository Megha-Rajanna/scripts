diff --git a/src/crypto/blake2/blake2.c b/src/crypto/blake2/blake2.c
index 14bbe5b23..eefe2706e 100644
--- a/src/crypto/blake2/blake2.c
+++ b/src/crypto/blake2/blake2.c
@@ -157,7 +157,9 @@ void BLAKE2B256_Final(uint8_t out[BLAKE2B256_DIGEST_LENGTH], BLAKE2B_CTX *b2b) {
   blake2b_transform(b2b, b2b->block, b2b->block_used,
                     /*is_final_block=*/1);
   static_assert(BLAKE2B256_DIGEST_LENGTH <= sizeof(b2b->h), "");
-  memcpy(out, b2b->h, BLAKE2B256_DIGEST_LENGTH);
+  for (int i = 0; i < BLAKE2B256_DIGEST_LENGTH/8; ++i) {
+    CRYPTO_store_u64_le(out + 8 * i, b2b->h[i]);
+  }
 }
 
 void BLAKE2B256(const uint8_t *data, size_t len,
diff --git a/src/crypto/bytestring/cbb.c b/src/crypto/bytestring/cbb.c
index 5280dc8f9..c4191e246 100644
--- a/src/crypto/bytestring/cbb.c
+++ b/src/crypto/bytestring/cbb.c
@@ -521,21 +521,37 @@ int CBB_add_asn1_int64_with_tag(CBB *cbb, int64_t value, CBS_ASN1_TAG tag) {
 
   uint8_t bytes[sizeof(int64_t)];
   memcpy(bytes, &value, sizeof(value));
+#if __BYTE_ORDER == __BIG_ENDIAN
+  int start = 0;
+  // Skip leading sign-extension bytes unless they are necessary.
+  while (start < 8 && (bytes[start] == 0xff && (bytes[start + 1] & 0x80))) {
+    start++;
+  }
+#else
   int start = 7;
   // Skip leading sign-extension bytes unless they are necessary.
   while (start > 0 && (bytes[start] == 0xff && (bytes[start - 1] & 0x80))) {
     start--;
   }
+#endif
 
   CBB child;
   if (!CBB_add_asn1(cbb, &child, tag)) {
     return 0;
   }
+#if __BYTE_ORDER == __BIG_ENDIAN
+  for (int i = start; i < 8; i++) {
+    if (!CBB_add_u8(&child, bytes[i])) {
+      return 0;
+    }
+  }
+#else
   for (int i = start; i >= 0; i--) {
     if (!CBB_add_u8(&child, bytes[i])) {
       return 0;
     }
   }
+#endif
   return CBB_flush(cbb);
 }
 
diff --git a/src/crypto/bytestring/cbs.c b/src/crypto/bytestring/cbs.c
index 631f284f1..ea667f70b 100644
--- a/src/crypto/bytestring/cbs.c
+++ b/src/crypto/bytestring/cbs.c
@@ -522,7 +522,11 @@ int CBS_get_asn1_int64(CBS *cbs, int64_t *out) {
   uint8_t sign_extend[sizeof(int64_t)];
   memset(sign_extend, is_negative ? 0xff : 0, sizeof(sign_extend));
   for (size_t i = 0; i < len; i++) {
+#if __BYTE_ORDER == __BIG_ENDIAN
+    sign_extend[sizeof(int64_t) - i - 1] = data[len - i - 1];
+#else
     sign_extend[i] = data[len - i - 1];
+#endif
   }
   memcpy(out, sign_extend, sizeof(sign_extend));
   return 1;
diff --git a/src/crypto/chacha/chacha.c b/src/crypto/chacha/chacha.c
index a4d88c0a4..a053c3b12 100644
--- a/src/crypto/chacha/chacha.c
+++ b/src/crypto/chacha/chacha.c
@@ -41,9 +41,24 @@ static const uint8_t sigma[16] = { 'e', 'x', 'p', 'a', 'n', 'd', ' ', '3',
 void CRYPTO_hchacha20(uint8_t out[32], const uint8_t key[32],
                       const uint8_t nonce[16]) {
   uint32_t x[16];
-  OPENSSL_memcpy(x, sigma, sizeof(sigma));
-  OPENSSL_memcpy(&x[4], key, 32);
-  OPENSSL_memcpy(&x[12], nonce, 16);
+  x[0] = CRYPTO_load_u32_le(sigma + 0);
+  x[1] = CRYPTO_load_u32_le(sigma + 4);
+  x[2] = CRYPTO_load_u32_le(sigma + 8);
+  x[3] = CRYPTO_load_u32_le(sigma + 12);
+
+  x[4] = CRYPTO_load_u32_le(key + 0);
+  x[5] = CRYPTO_load_u32_le(key + 4);
+  x[6] = CRYPTO_load_u32_le(key + 8);
+  x[7] = CRYPTO_load_u32_le(key + 12);
+  x[8] = CRYPTO_load_u32_le(key + 16);
+  x[9] = CRYPTO_load_u32_le(key + 20);
+  x[10] = CRYPTO_load_u32_le(key + 24);
+  x[11] = CRYPTO_load_u32_le(key + 28);
+
+  x[12] = CRYPTO_load_u32_le(nonce + 0);
+  x[13] = CRYPTO_load_u32_le(nonce + 4);
+  x[14] = CRYPTO_load_u32_le(nonce + 8);
+  x[15] = CRYPTO_load_u32_le(nonce + 12);
 
   for (size_t i = 0; i < 20; i += 2) {
     QUARTERROUND(0, 4, 8, 12)
@@ -56,8 +71,13 @@ void CRYPTO_hchacha20(uint8_t out[32], const uint8_t key[32],
     QUARTERROUND(3, 4, 9, 14)
   }
 
-  OPENSSL_memcpy(out, &x[0], sizeof(uint32_t) * 4);
-  OPENSSL_memcpy(&out[16], &x[12], sizeof(uint32_t) * 4);
+  int i;
+  for (i = 0; i < 4; ++i) {
+    CRYPTO_store_u32_le(out + 4 * i, x[i]);
+  }
+  for (i = 0; i < 4; ++i) {
+    CRYPTO_store_u32_le(out + 16 + (4 * i), x[i + 12]);
+  }
 }
 
 #if defined(CHACHA20_ASM)
diff --git a/src/crypto/compiler_test.cc b/src/crypto/compiler_test.cc
index 910233759..1e8d8f252 100644
--- a/src/crypto/compiler_test.cc
+++ b/src/crypto/compiler_test.cc
@@ -12,6 +12,8 @@
  * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
  * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. */
 
+#include <byteswap.h>
+#include <endian.h>
 #include <limits.h>
 #include <stdint.h>
 
@@ -37,7 +39,15 @@ static void CheckRepresentation(T value) {
   // maximum value until it fits (this must be a power of two). This is the
   // conversion we want.
   using UnsignedT = typename std::make_unsigned<T>::type;
+#if __BYTE_ORDER == __LITTLE_ENDIAN
   UnsignedT value_u = static_cast<UnsignedT>(value);
+#else
+  UnsignedT value_u =
+    sizeof(UnsignedT) == 2 ? bswap_16(static_cast<UnsignedT>(value)) :
+    sizeof(UnsignedT) == 4 ? bswap_32(static_cast<UnsignedT>(value)) :
+    sizeof(UnsignedT) == 8 ? bswap_64(static_cast<UnsignedT>(value)) :
+    static_cast<UnsignedT>(value);
+#endif
   EXPECT_EQ(sizeof(UnsignedT), sizeof(T));
 
   // Integers must be little-endian.
diff --git a/src/crypto/curve25519/spake25519.c b/src/crypto/curve25519/spake25519.c
index c45d15a58..e1041bea6 100644
--- a/src/crypto/curve25519/spake25519.c
+++ b/src/crypto/curve25519/spake25519.c
@@ -384,7 +384,13 @@ int SPAKE2_generate_msg(SPAKE2_CTX *ctx, uint8_t *out, size_t *out_len,
   // bit and so one for all the bottom three bits.
 
   scalar password_scalar;
+#if __BYTE_ORDER == __BIG_ENDIAN
+  for (size_t i = 0; i < 32 / sizeof(BN_ULONG); i++) {
+    password_scalar.words[i] = CRYPTO_load_word_be(password_tmp + i * sizeof(BN_ULONG));
+  }
+#else
   OPENSSL_memcpy(&password_scalar, password_tmp, sizeof(password_scalar));
+#endif
 
   // |password_scalar| is the result of |x25519_sc_reduce| and thus is, at
   // most, $l-1$ (where $l$ is |kOrder|, the order of the prime-order subgroup
@@ -415,8 +421,14 @@ int SPAKE2_generate_msg(SPAKE2_CTX *ctx, uint8_t *out, size_t *out_len,
     assert((password_scalar.words[0] & 7) == 0);
   }
 
+#if __BYTE_ORDER == __BIG_ENDIAN
+  for (size_t i = 0; i < 32 / sizeof(BN_ULONG); i++) {
+    CRYPTO_store_word_be(ctx->password_scalar + i * sizeof(BN_ULONG), password_scalar.words[i]);
+  }
+#else
   OPENSSL_memcpy(ctx->password_scalar, password_scalar.words,
                  sizeof(ctx->password_scalar));
+#endif
 
   ge_p3 mask;
   x25519_ge_scalarmult_small_precomp(&mask, ctx->password_scalar,
diff --git a/src/crypto/ec_extra/hash_to_curve.c b/src/crypto/ec_extra/hash_to_curve.c
index f29ef1306..2fff3cc69 100644
--- a/src/crypto/ec_extra/hash_to_curve.c
+++ b/src/crypto/ec_extra/hash_to_curve.c
@@ -162,10 +162,19 @@ static void big_endian_to_words(BN_ULONG *out, size_t num_words,
   assert(len <= num_words * sizeof(BN_ULONG));
   // Ensure any excess bytes are zeroed.
   OPENSSL_memset(out, 0, num_words * sizeof(BN_ULONG));
+#if __BYTE_ORDER == __BIG_ENDIAN
+  size_t words_to_write = (len / sizeof(BN_ULONG));
+  for (size_t i = 0; i < words_to_write; i++) {
+    OPENSSL_memcpy(out + words_to_write - i - 1,
+                   (void *)in + (i * sizeof(BN_ULONG)),
+                   sizeof(BN_ULONG));
+  }
+#else
   uint8_t *out_u8 = (uint8_t *)out;
   for (size_t i = 0; i < len; i++) {
     out_u8[len - 1 - i] = in[i];
   }
+#endif
 }
 
 // hash_to_field implements the operation described in section 5.2
diff --git a/src/crypto/evp/scrypt.c b/src/crypto/evp/scrypt.c
index 8212cd15e..293067202 100644
--- a/src/crypto/evp/scrypt.c
+++ b/src/crypto/evp/scrypt.c
@@ -193,7 +193,17 @@ int EVP_PBE_scrypt(const char *password, size_t password_len,
   }
 
   for (uint64_t i = 0; i < p; i++) {
+    for (uint64_t j = 0; j < 2 * r; j++) {
+      for (int k = 0; k < 16; k++) {
+        B[j + i * 2 * r].words[k] = CRYPTO_load_u32_le(&B[j + i * 2 * r].words[k]);
+      }
+    }
     scryptROMix(B + 2 * r * i, r, N, T, V);
+    for (uint64_t j = 0; j < 2 * r; j++) {
+      for (int k = 0; k < 16; k++) {
+        B[j + i * 2 * r].words[k] = CRYPTO_load_u32_le(&B[j + i * 2 * r].words[k]);
+      }
+    }
   }
 
   if (!PKCS5_PBKDF2_HMAC(password, password_len, (const uint8_t *)B, B_bytes, 1,
diff --git a/src/crypto/fipsmodule/aes/aes_nohw.c b/src/crypto/fipsmodule/aes/aes_nohw.c
index c5dec0e5c..77798db57 100644
--- a/src/crypto/fipsmodule/aes/aes_nohw.c
+++ b/src/crypto/fipsmodule/aes/aes_nohw.c
@@ -345,7 +345,8 @@ static inline uint32_t aes_nohw_word_from_bytes(uint8_t a0, uint8_t a1,
 
 static inline void aes_nohw_compact_block(aes_word_t out[AES_NOHW_BLOCK_WORDS],
                                           const uint8_t in[16]) {
-  memcpy(out, in, 16);
+  out[0] = CRYPTO_load_u64_le(in);
+  out[1] = CRYPTO_load_u64_le(in + 8);
 #if defined(OPENSSL_SSE2)
   // No conversions needed.
 #elif defined(OPENSSL_64_BIT)
@@ -381,8 +382,8 @@ static inline void aes_nohw_uncompact_block(
       aes_nohw_uncompact_word((a0 & UINT64_C(0x00000000ffffffff)) | (a1 << 32));
   uint64_t b1 =
       aes_nohw_uncompact_word((a1 & UINT64_C(0xffffffff00000000)) | (a0 >> 32));
-  memcpy(out, &b0, 8);
-  memcpy(out + 8, &b1, 8);
+  CRYPTO_store_u64_le(out, b0);
+  CRYPTO_store_u64_le(out + 8, b1);
 #else
   uint32_t a0 = in[0];
   uint32_t a1 = in[1];
diff --git a/src/crypto/fipsmodule/bn/bytes.c b/src/crypto/fipsmodule/bn/bytes.c
index aca0e38ef..eab8157a2 100644
--- a/src/crypto/fipsmodule/bn/bytes.c
+++ b/src/crypto/fipsmodule/bn/bytes.c
@@ -78,7 +78,36 @@ void bn_big_endian_to_words(BN_ULONG *out, size_t out_len, const uint8_t *in,
     }
 
     in_len -= sizeof(BN_ULONG);
+#if __BYTE_ORDER == __BIG_ENDIAN
+    out[i] = CRYPTO_load_word_le(in + in_len);
+#else
     out[i] = CRYPTO_load_word_be(in + in_len);
+#endif
+  }
+
+  // The caller should have sized the output to avoid truncation.
+  assert(in_len == 0);
+}
+
+static void bn_little_endian_to_big_endian_words(BN_ULONG *out, size_t out_len, const uint8_t *in,
+                                                 size_t in_len) {
+  const size_t in_tot = in_len;
+  for (size_t i = 0; i < out_len; i++) {
+    if (in_len < sizeof(BN_ULONG)) {
+      // Load the last partial word.
+      BN_ULONG word = 0;
+      for (size_t j = 0; j < in_len; j++) {
+        word = (word << 8) | in[in_tot - j - 1];
+      }
+      in_len = 0;
+      out[i] = word;
+      // Fill the remainder with zeros.
+      OPENSSL_memset(out + i + 1, 0, (out_len - i - 1) * sizeof(BN_ULONG));
+      break;
+    }
+
+    out[i] = CRYPTO_load_word_be(in + in_tot - in_len);
+    in_len -= sizeof(BN_ULONG);
   }
 
   // The caller should have sized the output to avoid truncation.
@@ -140,12 +169,16 @@ BIGNUM *BN_lebin2bn(const uint8_t *in, size_t len, BIGNUM *ret) {
   }
   ret->width = (int)num_words;
 
+#if __BYTE_ORDER == __BIG_ENDIAN
+  bn_little_endian_to_big_endian_words(ret->d, ret->width, in, len);
+#else
   // Make sure the top bytes will be zeroed.
   ret->d[num_words - 1] = 0;
 
-  // We only support little-endian platforms, so we can simply memcpy the
+  // For little-endian platforms, we can simply memcpy the
   // internal representation.
   OPENSSL_memcpy(ret->d, in, len);
+#endif
   return ret;
 }
 
@@ -160,9 +193,18 @@ static int fits_in_bytes(const BN_ULONG *words, size_t num_words,
   const uint8_t *bytes = (const uint8_t *)words;
   size_t tot_bytes = num_words * sizeof(BN_ULONG);
   uint8_t mask = 0;
+#if __BYTE_ORDER == __BIG_ENDIAN
+  for (size_t i = num_bytes; i < tot_bytes; i++) {
+    size_t word_end = (i / sizeof(BN_ULONG) + 1) * sizeof(BN_ULONG);
+    size_t remainder_of_word = i % sizeof(BN_ULONG);
+    size_t idx = word_end - remainder_of_word - 1;
+    mask |= bytes[idx];
+  }
+#else
   for (size_t i = num_bytes; i < tot_bytes; i++) {
     mask |= bytes[i];
   }
+#endif
   return mask == 0;
 }
 
@@ -170,10 +212,20 @@ void bn_assert_fits_in_bytes(const BIGNUM *bn, size_t num) {
   const uint8_t *bytes = (const uint8_t *)bn->d;
   size_t tot_bytes = bn->width * sizeof(BN_ULONG);
   if (tot_bytes > num) {
+#if __BYTE_ORDER == __BIG_ENDIAN
+    for (size_t i = num; i < tot_bytes; i++) {
+      size_t word_end = (i / sizeof(BN_ULONG) + 1) * sizeof(BN_ULONG);
+      size_t remainder_of_word = i % sizeof(BN_ULONG);
+      assert(bytes[word_end - remainder_of_word - 1] == 0);
+      (void)word_end;
+      (void)remainder_of_word;
+    }
+#else
     CONSTTIME_DECLASSIFY(bytes + num, tot_bytes - num);
     for (size_t i = num; i < tot_bytes; i++) {
       assert(bytes[i] == 0);
     }
+#endif
     (void)bytes;
   }
 }
@@ -183,17 +235,36 @@ void bn_words_to_big_endian(uint8_t *out, size_t out_len, const BN_ULONG *in,
   // The caller should have selected an output length without truncation.
   assert(fits_in_bytes(in, in_len, out_len));
 
-  // We only support little-endian platforms, so the internal representation is
-  // also little-endian as bytes. We can simply copy it in reverse.
   const uint8_t *bytes = (const uint8_t *)in;
   size_t num_bytes = in_len * sizeof(BN_ULONG);
   if (out_len < num_bytes) {
     num_bytes = out_len;
   }
 
+#if __BYTE_ORDER == __BIG_ENDIAN
+  size_t bytes_left = num_bytes;
+  for (size_t i = 0; i < in_len; i++) {
+    if (bytes_left < sizeof(BN_ULONG)) {
+      // Load last partial word
+      OPENSSL_memcpy(out + out_len - (i * sizeof(BN_ULONG)) - bytes_left,
+                     bytes + ((i + 1) * sizeof(BN_ULONG)) - bytes_left,
+                     bytes_left);
+      bytes_left = 0;
+      break;
+    }
+    OPENSSL_memcpy(out + out_len - ((i + 1) * sizeof(BN_ULONG)),
+                   bytes + (i * sizeof(BN_ULONG)),
+                   sizeof(BN_ULONG));
+    bytes_left -= sizeof(BN_ULONG);
+  }
+  assert(bytes_left == 0);
+#else
+  // For little-endian platforms, the internal representation is
+  // also little-endian as bytes. We can simply copy it in reverse.
   for (size_t i = 0; i < num_bytes; i++) {
     out[out_len - i - 1] = bytes[i];
   }
+#endif
   // Pad out the rest of the buffer with zeroes.
   OPENSSL_memset(out, 0, out_len - num_bytes);
 }
@@ -209,15 +280,22 @@ int BN_bn2le_padded(uint8_t *out, size_t len, const BIGNUM *in) {
     return 0;
   }
 
-  // We only support little-endian platforms, so we can simply memcpy into the
+  size_t num_bytes = in->width * BN_BYTES;
+
+#if __BYTE_ORDER == __BIG_ENDIAN
+  for (int i = 0; i < in->width; i++) {
+    CRYPTO_store_word_be(out + (i * sizeof(BN_ULONG)), in->d[i]);
+  }
+#else
+  // For little-endian platforms, we can simply memcpy into the
   // internal representation.
   const uint8_t *bytes = (const uint8_t *)in->d;
-  size_t num_bytes = in->width * BN_BYTES;
   if (len < num_bytes) {
     num_bytes = len;
   }
 
   OPENSSL_memcpy(out, bytes, num_bytes);
+#endif
   // Pad out the rest of the buffer with zeroes.
   OPENSSL_memset(out + num_bytes, 0, len - num_bytes);
   return 1;
diff --git a/src/crypto/internal.h b/src/crypto/internal.h
index a4d3fe91f..45db85e4c 100644
--- a/src/crypto/internal.h
+++ b/src/crypto/internal.h
@@ -1039,42 +1039,68 @@ static inline void *OPENSSL_memset(void *dst, int c, size_t n) {
 static inline uint32_t CRYPTO_load_u32_le(const void *in) {
   uint32_t v;
   OPENSSL_memcpy(&v, in, sizeof(v));
+#if __BYTE_ORDER == __BIG_ENDIAN
+  return CRYPTO_bswap4(v);
+#else
   return v;
+#endif
 }
 
 static inline void CRYPTO_store_u32_le(void *out, uint32_t v) {
+#if __BYTE_ORDER == __BIG_ENDIAN
+  v = CRYPTO_bswap4(v);
+#endif
   OPENSSL_memcpy(out, &v, sizeof(v));
 }
 
 static inline uint32_t CRYPTO_load_u32_be(const void *in) {
   uint32_t v;
   OPENSSL_memcpy(&v, in, sizeof(v));
+#if __BYTE_ORDER == __BIG_ENDIAN
+  return v;
+#else
   return CRYPTO_bswap4(v);
+#endif
 }
 
 static inline void CRYPTO_store_u32_be(void *out, uint32_t v) {
+#if __BYTE_ORDER != __BIG_ENDIAN
   v = CRYPTO_bswap4(v);
+#endif
   OPENSSL_memcpy(out, &v, sizeof(v));
 }
 
 static inline uint64_t CRYPTO_load_u64_le(const void *in) {
   uint64_t v;
   OPENSSL_memcpy(&v, in, sizeof(v));
+#if __BYTE_ORDER == __BIG_ENDIAN
+  return CRYPTO_bswap8(v);
+#else
   return v;
+#endif
 }
 
 static inline void CRYPTO_store_u64_le(void *out, uint64_t v) {
+#if __BYTE_ORDER == __BIG_ENDIAN
+  v = CRYPTO_bswap8(v);
+#endif
   OPENSSL_memcpy(out, &v, sizeof(v));
 }
 
 static inline uint64_t CRYPTO_load_u64_be(const void *ptr) {
   uint64_t ret;
   OPENSSL_memcpy(&ret, ptr, sizeof(ret));
+#if __BYTE_ORDER == __BIG_ENDIAN
+  return ret;
+#else
   return CRYPTO_bswap8(ret);
+#endif
 }
 
 static inline void CRYPTO_store_u64_be(void *out, uint64_t v) {
+#if __BYTE_ORDER != __BIG_ENDIAN
   v = CRYPTO_bswap8(v);
+#endif
   OPENSSL_memcpy(out, &v, sizeof(v));
 }
 
@@ -1100,6 +1126,17 @@ static inline crypto_word_t CRYPTO_load_word_be(const void *in) {
 #endif
 }
 
+static inline void CRYPTO_store_word_be(void *out, crypto_word_t v) {
+#if defined(OPENSSL_64_BIT)
+  static_assert(sizeof(v) == 8, "crypto_word_t has unexpected size");
+  v = CRYPTO_bswap8(v);
+#else
+  static_assert(sizeof(v) == 4, "crypto_word_t has unexpected size");
+  v = CRYPTO_bswap4(v);
+#endif
+  OPENSSL_memcpy(out, &v, sizeof(v));
+}
+
 
 // Bit rotation functions.
 //
diff --git a/src/crypto/kyber/keccak.c b/src/crypto/kyber/keccak.c
index f1c012d11..df6a7fba2 100644
--- a/src/crypto/kyber/keccak.c
+++ b/src/crypto/kyber/keccak.c
@@ -20,6 +20,15 @@
 #include "../internal.h"
 #include "./internal.h"
 
+static void bswap8_inplace_if_big_endian(uint64_t *state, size_t len) {
+#if __BYTE_ORDER == __BIG_ENDIAN
+  for (size_t i = 0; i < len; i++) {
+    state[i] = CRYPTO_bswap8(state[i]);
+  }
+#else
+  (void)state;
+#endif
+}
 
 // keccak_f implements the Keccak-1600 permutation as described at
 // https://keccak.team/keccak_specs_summary.html. Each lane is represented as a
@@ -150,6 +159,7 @@ static void keccak_init(struct BORINGSSL_keccak_st *ctx,
 
   // XOR the final block. Accessing |ctx->state| as a |uint8_t*| is allowed by
   // strict aliasing because we require |uint8_t| to be a character type.
+  bswap8_inplace_if_big_endian(ctx->state, sizeof(ctx->state) / sizeof(uint64_t));
   uint8_t *state_bytes = (uint8_t *)ctx->state;
   assert(in_len < ctx->rate_bytes);
   for (size_t i = 0; i < in_len; i++) {
@@ -157,6 +167,7 @@ static void keccak_init(struct BORINGSSL_keccak_st *ctx,
   }
   state_bytes[in_len] ^= terminator;
   state_bytes[ctx->rate_bytes - 1] ^= 0x80;
+  bswap8_inplace_if_big_endian(ctx->state, sizeof(ctx->state) / sizeof(uint64_t));
   keccak_f(ctx->state);
 }
 
@@ -186,6 +197,7 @@ void BORINGSSL_keccak_squeeze(struct BORINGSSL_keccak_st *ctx, uint8_t *out,
   // Accessing |ctx->state| as a |uint8_t*| is allowed by strict aliasing
   // because we require |uint8_t| to be a character type.
   const uint8_t *state_bytes = (const uint8_t *)ctx->state;
+  bswap8_inplace_if_big_endian(ctx->state, sizeof(ctx->state) / sizeof(uint64_t));
   while (out_len) {
     size_t remaining = ctx->rate_bytes - ctx->offset;
     size_t todo = out_len;
@@ -197,8 +209,11 @@ void BORINGSSL_keccak_squeeze(struct BORINGSSL_keccak_st *ctx, uint8_t *out,
     out_len -= todo;
     ctx->offset += todo;
     if (ctx->offset == ctx->rate_bytes) {
+      bswap8_inplace_if_big_endian(ctx->state, sizeof(ctx->state) / sizeof(uint64_t));
       keccak_f(ctx->state);
+      bswap8_inplace_if_big_endian(ctx->state, sizeof(ctx->state) / sizeof(uint64_t));
       ctx->offset = 0;
     }
   }
+  bswap8_inplace_if_big_endian(ctx->state, sizeof(ctx->state) / sizeof(uint64_t));
 }
diff --git a/src/crypto/siphash/siphash.c b/src/crypto/siphash/siphash.c
index 0921eac2b..52732ecd1 100644
--- a/src/crypto/siphash/siphash.c
+++ b/src/crypto/siphash/siphash.c
@@ -41,11 +41,14 @@ uint64_t SIPHASH_24(const uint64_t key[2], const uint8_t *input,
                     size_t input_len) {
   const size_t orig_input_len = input_len;
 
+  uint64_t k0 = CRYPTO_load_u64_le(&key[0]);
+  uint64_t k1 = CRYPTO_load_u64_le(&key[1]);
+
   uint64_t v[4];
-  v[0] = key[0] ^ UINT64_C(0x736f6d6570736575);
-  v[1] = key[1] ^ UINT64_C(0x646f72616e646f6d);
-  v[2] = key[0] ^ UINT64_C(0x6c7967656e657261);
-  v[3] = key[1] ^ UINT64_C(0x7465646279746573);
+  v[0] = k0 ^ UINT64_C(0x736f6d6570736575);
+  v[1] = k1 ^ UINT64_C(0x646f72616e646f6d);
+  v[2] = k0 ^ UINT64_C(0x6c7967656e657261);
+  v[3] = k1 ^ UINT64_C(0x7465646279746573);
 
   while (input_len >= sizeof(uint64_t)) {
     uint64_t m = CRYPTO_load_u64_le(input);
diff --git a/src/crypto/siphash/siphash_test.cc b/src/crypto/siphash/siphash_test.cc
index 6407e0da5..a11cafd9f 100644
--- a/src/crypto/siphash/siphash_test.cc
+++ b/src/crypto/siphash/siphash_test.cc
@@ -50,8 +50,10 @@ TEST(SipHash, Vectors) {
 
     uint64_t key_words[2];
     memcpy(key_words, key.data(), key.size());
-    uint64_t result = SIPHASH_24(key_words, msg.data(), msg.size());
-    EXPECT_EQ(Bytes(reinterpret_cast<uint8_t *>(&result), sizeof(result)),
+    uint8_t result[8];
+    CRYPTO_store_u64_le(&result,
+                        SIPHASH_24(key_words, msg.data(), msg.size()));
+    EXPECT_EQ(Bytes(result, sizeof(result)),
               Bytes(hash));
   });
 }
diff --git a/src/include/openssl/target.h b/src/include/openssl/target.h
index 12736416f..71d032033 100644
--- a/src/include/openssl/target.h
+++ b/src/include/openssl/target.h
@@ -54,6 +54,9 @@
 #define OPENSSL_32_BIT
 #elif defined(__myriad2__)
 #define OPENSSL_32_BIT
+#elif defined(__s390x__)
+#define OPENSSL_64_BIT
+#define OPENSSL_S390X
 #else
 // Note BoringSSL only supports standard 32-bit and 64-bit two's-complement,
 // little-endian architectures. Functions will not produce the correct answer
diff --git a/src/ssl/test/runner/runner.go b/src/ssl/test/runner/runner.go
index fcdd11a3d..edc3704ca 100644
--- a/src/ssl/test/runner/runner.go
+++ b/src/ssl/test/runner/runner.go
@@ -48,6 +48,7 @@ import (
 	"boringssl.googlesource.com/boringssl/ssl/test/runner/hpke"
 	"boringssl.googlesource.com/boringssl/util/testresult"
 	"golang.org/x/crypto/cryptobyte"
+	"golang.org/x/sys/cpu"
 )
 
 var (
@@ -1010,7 +1011,13 @@ func doExchange(test *testCase, config *Config, conn net.Conn, isResume bool, tr
 		if _, err := io.ReadFull(tlsConn, secretLenBytes); err != nil {
 			return err
 		}
-		secretLen := binary.LittleEndian.Uint16(secretLenBytes)
+
+		var secretLen uint16
+		if cpu.IsBigEndian {
+			secretLen = binary.BigEndian.Uint16(secretLenBytes)
+		} else {
+			secretLen = binary.LittleEndian.Uint16(secretLenBytes)
+		}
 
 		theirReadSecret := make([]byte, secretLen)
 		theirWriteSecret := make([]byte, secretLen)