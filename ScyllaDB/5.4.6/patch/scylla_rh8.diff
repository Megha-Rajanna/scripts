diff --git a/configure.py b/configure.py
index 8947eb3..27a6a56 100755
--- a/configure.py
+++ b/configure.py
@@ -163,11 +163,11 @@ def flag_supported(flag, compiler):
 
 def linker_flags(compiler):
     src_main = 'int main(int argc, char **argv) { return 0; }'
-    link_flags = ['-fuse-ld=lld']
+    link_flags = ['-fuse-ld=bfd']
     if try_compile_and_link(source=src_main, flags=link_flags, compiler=compiler):
-        print('Note: using the lld linker')
+        print('Note: using the bfd linker')
         return ' '.join(link_flags)
-    link_flags = ['-fuse-ld=gold']
+    link_flags = ['-fuse-ld=bfd']
     if try_compile_and_link(source=src_main, flags=link_flags, compiler=compiler):
         print('Note: using the gold linker')
         threads_flag = '-Wl,--threads'
@@ -409,7 +409,7 @@ modes = {
         'cxx_ld_flags': '',
         'stack-usage-threshold': 1024*40,
         # -fasan -Og breaks some coroutines on aarch64, use -O0 instead
-        'optimization-level': ('0' if platform.machine() == 'aarch64' else 'g'),
+        'optimization-level': ('0' if platform.machine() == 's390x' else 'g'),
         'per_src_extra_cxxflags': {},
         'cmake_build_type': 'Debug',
         'can_have_debug_info': True,
@@ -1517,7 +1517,6 @@ wasm_deps['wasm/test_word_double.wat'] = 'test/resource/wasm/c/test_word_double.
 
 warnings = [
     '-Wall',
-    '-Werror',
     '-Wimplicit-fallthrough',
     '-Wno-mismatched-tags',  # clang-only
     '-Wno-c++11-narrowing',
@@ -2243,7 +2242,7 @@ def write_build_file(f,
         build dist-server: phony dist-server-tar dist-server-debuginfo dist-server-rpm dist-server-deb
 
         rule build-submodule-reloc
-          command = cd $reloc_dir && ./reloc/build_reloc.sh --version $$(<../../build/SCYLLA-PRODUCT-FILE)-$$(sed 's/-/~/' <../../build/SCYLLA-VERSION-FILE)-$$(<../../build/SCYLLA-RELEASE-FILE) --nodeps $args
+          command = cd $reloc_dir && ./reloc/build_reloc.sh --version {scylla_product}-{scylla_version}-{scylla_release} --nodeps $args
         rule build-submodule-rpm
           command = cd $dir && ./reloc/build_rpm.sh --reloc-pkg $artifact
         rule build-submodule-deb
diff --git a/dist/common/scripts/scylla_io_setup b/dist/common/scripts/scylla_io_setup
index 3ef3f6c..d027633 100755
--- a/dist/common/scripts/scylla_io_setup
+++ b/dist/common/scripts/scylla_io_setup
@@ -60,13 +60,14 @@ class scylla_cpuinfo:
         f = open("/proc/cpuinfo", "r")
         results = {}
         for line in f:
-            if line == '\n':
+            if not line.startswith("processor"):
                 continue
             key, value = [x.strip() for x in line.split(":")]
-            if key == "processor":
-                cur_proc = int(value)
-                results[cur_proc] = {}
-            results[cur_proc][key] = value
+            cur_proc = int(key[10:])
+            results[cur_proc] = {}
+            for x in value.split(","):
+                key2, value2 = [y.strip() for y in x.split("=")]
+                results[cur_proc][key2] = value2
         return results
 
     def __init__(self):
@@ -83,7 +84,7 @@ class scylla_cpuinfo:
 
     def system_nr_cores(self):
         """Returns the number of cores available in the system"""
-        return len(set([x['core id'] for x in list(self._cpu_data["system"].values())]))
+        return len(set([x['identification'] for x in list(self._cpu_data["system"].values())]))
 
     def cpuset(self):
         """Returns the current cpuset Scylla is configured to use. Returns None if no constraints exist"""
diff --git a/test/boost/crc_test.cc b/test/boost/crc_test.cc
index 3b5a8a6..17eda7c 100644
--- a/test/boost/crc_test.cc
+++ b/test/boost/crc_test.cc
@@ -11,27 +11,8 @@
 #include <boost/test/unit_test.hpp>
 #include "utils/crc.hh"
 #include "utils/clmul.hh"
-#include "utils/gz/barrett.hh"
 #include <seastar/core/print.hh>
 
-constexpr uint32_t input_32_1_c = 0x12345678;
-uint32_t input_32_1 = input_32_1_c; // NOT constexpr
-
-constexpr uint32_t input_32_2_c = 0xabcdef12;
-uint32_t input_32_2 = input_32_2_c; // NOT constexpr
-
-constexpr uint64_t input_64_1_c = 0x1234567890abcdef;
-uint64_t input_64_1 = input_64_1_c; // NOT constexpr
-
-BOOST_AUTO_TEST_CASE(clmul_u32_constexpr_equals_native) {
-    constexpr auto constexpr_result = clmul(input_32_1_c, input_32_2_c);
-    BOOST_REQUIRE_EQUAL(clmul(input_32_1, input_32_2), constexpr_result);
-}
-
-BOOST_AUTO_TEST_CASE(barrett_fold_constexpr_equals_native) {
-    constexpr auto constexpr_result = crc32_fold_barrett_u64(input_64_1_c);
-    BOOST_REQUIRE_EQUAL(crc32_fold_barrett_u64(input_64_1), constexpr_result);
-}
 inline
 uint32_t
 do_compute_crc(utils::crc32& c) {
diff --git a/test/cql/lwt_test.cql b/test/cql/lwt_test.cql
index 7cb3fbc..1103faf 100644
--- a/test/cql/lwt_test.cql
+++ b/test/cql/lwt_test.cql
@@ -638,7 +638,7 @@ select s from lwt where a= 1;
 drop table lwt;
 -- collections of collections
 -- non-frozen nested sets are not supported
-create table lwt (a int, b set<map<int,int>>, c list<set<int>>, primary key (a));
+create table lwt (a int, b set<map<int,int>>, primary key (a));
 -- frozen collection elements are however ok
 create table lwt (a int, b set<frozen<list<int>>>, c list<frozen<set<int>>>, primary key (a));
 insert into lwt (a, b, c) values (1, {[1,2], [1,2]}, [{1,2}, {1,2}]);
diff --git a/test/cql/lwt_test.result b/test/cql/lwt_test.result
index eb90adc..5941382 100644
--- a/test/cql/lwt_test.result
+++ b/test/cql/lwt_test.result
@@ -2348,7 +2348,7 @@ Error from server: code=2200 [Invalid query] message="Invalid comparison with nu
 OK
 > -- collections of collections
 > -- non-frozen nested sets are not supported
-> create table lwt (a int, b set<map<int,int>>, c list<set<int>>, primary key (a));
+> create table lwt (a int, b set<map<int,int>>, primary key (a));
 Error from server: code=2200 [Invalid query] message="Non-frozen user types or collections are not allowed inside collections: set<map<int, int>>"
 > -- frozen collection elements are however ok
 > create table lwt (a int, b set<frozen<list<int>>>, c list<frozen<set<int>>>, primary key (a));
diff --git a/test/unit/cross_shard_barrier_test.cc b/test/unit/cross_shard_barrier_test.cc
index 2ff76ab..f2c1cd7 100644
--- a/test/unit/cross_shard_barrier_test.cc
+++ b/test/unit/cross_shard_barrier_test.cc
@@ -21,7 +21,7 @@ static constexpr unsigned phases_scale = 11;
 class worker : public seastar::peering_sharded_service<worker> {
     utils::cross_shard_barrier _barrier;
     std::atomic<unsigned> _phase;
-    std::random_device _rndgen;
+    std::mt19937 _rndgen;
     timer<> _watchdog;
     unsigned _last_wdog_phase;
 
diff --git a/tools/lua_sstable_consumer.cc b/tools/lua_sstable_consumer.cc
index 21e6e48..db330f9 100644
--- a/tools/lua_sstable_consumer.cc
+++ b/tools/lua_sstable_consumer.cc
@@ -1286,7 +1286,7 @@ class lua_sstable_consumer : public sstable_consumer {
         int ret = LUA_YIELD;
         int nresults = 0;
         while (ret == LUA_YIELD) {
-            ret = lua_resume(l, nullptr, nargs, &nresults);
+            ret = lua_resume(l, nullptr, nargs);
             if (ret == LUA_YIELD) {
                 if (nresults == 0) {
                     co_await coroutine::maybe_yield();
diff --git a/utils/exceptions.hh b/utils/exceptions.hh
index cd4bc11..4b2725f 100644
--- a/utils/exceptions.hh
+++ b/utils/exceptions.hh
@@ -10,7 +10,7 @@
 
 #include <cstddef>
 
-#if defined(__GLIBCXX__) && (defined(__x86_64__) || defined(__aarch64__))
+#if defined(__GLIBCXX__) && (defined(__x86_64__) || defined(__aarch64__) || defined(__s390x__))
   #define OPTIMIZED_EXCEPTION_HANDLING_AVAILABLE
 #endif
 
diff --git a/utils/gz/barrett.hh b/utils/gz/barrett.hh
index cfff5f6..c7ec85e 100644
--- a/utils/gz/barrett.hh
+++ b/utils/gz/barrett.hh
@@ -142,6 +142,8 @@ uint32_t crc32_fold_barrett_u64_native(uint64_t p) {
             vcombine_u64((uint64x1_t)p, (uint64x1_t)0UL));
 }
 
+#elif defined(__s390x__)
+
 #else
 
 #error "Not implemented for this arch"
diff --git a/utils/gz/crc_combine_table.cc b/utils/gz/crc_combine_table.cc
index 6439802..e5c24c4 100644
--- a/utils/gz/crc_combine_table.cc
+++ b/utils/gz/crc_combine_table.cc
@@ -58,6 +58,8 @@ constinit std::array<uint32_t, 256> crc32_x_pow_radix_8_table_base_8 = make_crc3
 constinit std::array<uint32_t, 256> crc32_x_pow_radix_8_table_base_16 = make_crc32_table(16, radix_bits, one, pows);
 constinit std::array<uint32_t, 256> crc32_x_pow_radix_8_table_base_24 = make_crc32_table(24, radix_bits, one, pows);
 
+#elif defined(__s390x__)
+
 #else
 
 #error "Not implemented for this CPU architecture."
