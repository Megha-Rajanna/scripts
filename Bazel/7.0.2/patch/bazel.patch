diff --git a/BUILD b/BUILD
index 8cda31e..5d140ea 100644
--- a/BUILD
+++ b/BUILD
@@ -211,7 +211,7 @@ genrule(
         ":maven-srcs",
         "//src:derived_java_srcs",
         "//src/main/java/com/google/devtools/build/lib/skyframe/serialization/autocodec:bootstrap_autocodec.tar",
-        "@bootstrap_repo_cache//:archives.tar",
+        #"@bootstrap_repo_cache//:archives.tar",
     ],
     outs = ["bazel-distfile.zip"],
     cmd = "$(location :combine_distfiles) $@ $(SRCS)",
@@ -230,7 +230,7 @@ genrule(
         ":maven-srcs",
         "//src:derived_java_srcs",
         "//src/main/java/com/google/devtools/build/lib/skyframe/serialization/autocodec:bootstrap_autocodec.tar",
-        "@bootstrap_repo_cache//:archives.tar",
+        #"@bootstrap_repo_cache//:archives.tar",
     ],
     outs = ["bazel-distfile.tar"],
     cmd = "$(location :combine_distfiles_to_tar.sh) $@ $(SRCS)",
diff --git a/MODULE.bazel b/MODULE.bazel
index 03f1dce..03c6a9f 100644
--- a/MODULE.bazel
+++ b/MODULE.bazel
@@ -23,7 +23,11 @@ bazel_dep(name = "zstd-jni", version = "1.5.2-3.bcr.1")
 bazel_dep(name = "blake3", version = "1.3.3.bcr.1")
 bazel_dep(name = "zlib", version = "1.3")
 bazel_dep(name = "rules_cc", version = "0.0.9")
-bazel_dep(name = "rules_java", version = "7.1.0")
+bazel_dep(name = "rules_java", version = "")
+local_path_override(
+  module_name = "rules_java",
+  path = "RULES_JAVA_ROOT_PATH/rules_java",
+)
 bazel_dep(name = "rules_proto", version = "5.3.0-21.7")
 bazel_dep(name = "rules_jvm_external", version = "5.2")
 bazel_dep(name = "rules_python", version = "0.26.0")
@@ -231,6 +235,7 @@ use_repo(
     "remotejdk17_win",
     "remotejdk17_win_arm64",
     "remotejdk21_linux",
+    "remotejdk21_linux_s390x",
     "remotejdk21_macos",
     "remotejdk21_macos_aarch64",
     "remotejdk21_win",
@@ -241,12 +246,12 @@ use_repo(
 # =========================================
 
 python = use_extension("@rules_python//python/extensions:python.bzl", "python")
-python.toolchain(python_version = "3.8")
+python.toolchain(python_version = "3.10")
 
 pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
 pip.parse(
     hub_name = "bazel_pip_dev_deps",
-    python_version = "3.8",
+    python_version = "3.10",
     requirements_lock = "//:requirements.txt",
 )
 use_repo(pip, "bazel_pip_dev_deps")
diff --git a/src/BUILD b/src/BUILD
index 90c19f2..a355263 100644
--- a/src/BUILD
+++ b/src/BUILD
@@ -573,6 +573,7 @@ filegroup(
         "@remote_java_tools_windows//:java_tools/src/tools/singlejar/singlejar_local.exe",
         "@remotejdk11_linux//:WORKSPACE",
         "@remotejdk11_linux_aarch64//:WORKSPACE",
+	"@remotejdk11_linux_s390x//:WORKSPACE",
         "@remotejdk11_macos//:WORKSPACE",
         "@remotejdk11_macos_aarch64//:WORKSPACE",
         "@remotejdk11_win//:WORKSPACE",
diff --git a/src/test/java/com/google/devtools/build/lib/query2/testutil/AbstractQueryTest.java b/src/test/java/com/google/devtools/build/lib/query2/testutil/AbstractQueryTest.java
index 5256328..f527b41 100644
--- a/src/test/java/com/google/devtools/build/lib/query2/testutil/AbstractQueryTest.java
+++ b/src/test/java/com/google/devtools/build/lib/query2/testutil/AbstractQueryTest.java
@@ -2212,7 +2212,7 @@ public abstract class AbstractQueryTest<T> {
 
     // We used to get a StackOverflowError at this depth. We're still vulnerable to stack overflows
     // at higher depths, due to how the query engine works.
-    int nestingDepth = 500;
+    int nestingDepth = 100;
     String queryString =
         Joiner.on(" + ").join(Collections.nCopies(nestingDepth, "let x = //foo:foo in $x"));
 
diff --git a/src/test/py/bazel/bzlmod/bazel_repo_mapping_test.py b/src/test/py/bazel/bzlmod/bazel_repo_mapping_test.py
index 0bcc215..554659d 100644
--- a/src/test/py/bazel/bzlmod/bazel_repo_mapping_test.py
+++ b/src/test/py/bazel/bzlmod/bazel_repo_mapping_test.py
@@ -375,7 +375,14 @@ source "${RUNFILES_DIR:-/dev/null}/$f" 2>/dev/null || \
         ],
     )
 
-    self.ScratchFile('MODULE.bazel', ['bazel_dep(name="test",version="1.0")'])
+    self.ScratchFile('MODULE.bazel', [
+        'bazel_dep(name = "rules_java", version = "")',
+        'local_path_override(',
+        '    module_name = "rules_java",',
+        '    path = "RULES_JAVA_ROOT_PATH/rules_java",',
+        ')',
+        'bazel_dep(name="test",version="1.0")',
+        ])
     self.ScratchFile('WORKSPACE')
 
     # Run sandboxed on Linux and macOS.
diff --git a/src/test/py/bazel/test_base.py b/src/test/py/bazel/test_base.py
index a9362e9..9342256 100644
--- a/src/test/py/bazel/test_base.py
+++ b/src/test/py/bazel/test_base.py
@@ -90,6 +90,7 @@ class TestBase(absltest.TestCase):
       'remotejdk17_win',
       'remotejdk17_win_arm64',
       'remotejdk21_linux',
+      'remotejdk21_linux_s390x',
       'remotejdk21_macos',
       'remotejdk21_macos_aarch64',
       'remotejdk21_win',
diff --git a/src/test/shell/bazel/BUILD b/src/test/shell/bazel/BUILD
index 30e1197..4c8d7d0 100644
--- a/src/test/shell/bazel/BUILD
+++ b/src/test/shell/bazel/BUILD
@@ -966,7 +966,7 @@ sh_test(
     ],
     shard_count = 22,
     tags = [
-        "block-network",
+        #"block-network",
         "no_windows",
     ],
 )
diff --git a/src/test/shell/bazel/bazel_with_jdk_test.sh b/src/test/shell/bazel/bazel_with_jdk_test.sh
index 8ad81b7..d348e8a 100755
--- a/src/test/shell/bazel/bazel_with_jdk_test.sh
+++ b/src/test/shell/bazel/bazel_with_jdk_test.sh
@@ -127,7 +127,9 @@ function test_bazel_license_prints_jdk_license() {
   expect_log "OPENJDK ASSEMBLY EXCEPTION" || \
       fail "'bazel license' did not print an expected string from ASSEMBLY_EXCEPTION"
 
-  expect_log "Provided you have not received the software directly from Azul and have already" || \
+  # Azul JDK is not used on s390x
+  # expect_log "Provided you have not received the software directly from Azul and have already" || \
+  expect_log "Linking this OpenJDK Code statically or dynamically with other code" || \
       fail "'bazel license' did not print an expected string from DISCLAIMER"
 
   expect_log '"CLASSPATH" EXCEPTION TO THE GPL' || \
diff --git a/src/test/shell/bazel/runfiles_test.sh b/src/test/shell/bazel/runfiles_test.sh
index 0bec82f..a429277 100755
--- a/src/test/shell/bazel/runfiles_test.sh
+++ b/src/test/shell/bazel/runfiles_test.sh
@@ -54,6 +54,11 @@ function test_runfiles_bzlmod() {
   create_workspace_with_default_repos WORKSPACE "blorp_malorp"
   cat > MODULE.bazel <<EOF
 module(name="blep")
+bazel_dep(name = "rules_java", version = "")
+local_path_override(
+  module_name = "rules_java",
+  path = "RULES_JAVA_ROOT_PATH/rules_java",
+)
 EOF
 
   mkdir foo
diff --git a/src/test/shell/testenv.sh.tmpl b/src/test/shell/testenv.sh.tmpl
index 80d15b6..4656581 100755
--- a/src/test/shell/testenv.sh.tmpl
+++ b/src/test/shell/testenv.sh.tmpl
@@ -305,6 +305,7 @@ EOF
         "remotejdk17_win"
         "remotejdk17_win_arm64"
         "remotejdk21_linux"
+	"remotejdk21_linux_s390x"
         "remotejdk21_macos"
         "remotejdk21_macos_aarch64"
         "remotejdk21_win"
diff --git a/src/test/tools/bzlmod/MODULE.bazel.lock b/src/test/tools/bzlmod/MODULE.bazel.lock
index aa7908c..c85e7d5 100644
--- a/src/test/tools/bzlmod/MODULE.bazel.lock
+++ b/src/test/tools/bzlmod/MODULE.bazel.lock
@@ -256,7 +256,8 @@
         "@remotejdk21_linux_aarch64_toolchain_config_repo//:all",
         "@remotejdk21_macos_toolchain_config_repo//:all",
         "@remotejdk21_macos_aarch64_toolchain_config_repo//:all",
-        "@remotejdk21_win_toolchain_config_repo//:all"
+        "@remotejdk21_win_toolchain_config_repo//:all",
+        "@remotejdk21_linux_s390x_toolchain_config_repo//:all"
       ],
       "extensionUsages": [
         {
@@ -295,7 +296,8 @@
             "remotejdk21_linux_aarch64_toolchain_config_repo": "remotejdk21_linux_aarch64_toolchain_config_repo",
             "remotejdk21_macos_toolchain_config_repo": "remotejdk21_macos_toolchain_config_repo",
             "remotejdk21_macos_aarch64_toolchain_config_repo": "remotejdk21_macos_aarch64_toolchain_config_repo",
-            "remotejdk21_win_toolchain_config_repo": "remotejdk21_win_toolchain_config_repo"
+            "remotejdk21_win_toolchain_config_repo": "remotejdk21_win_toolchain_config_repo",
+            "remotejdk21_linux_s390x_toolchain_config_repo": "remotejdk21_linux_s390x_toolchain_config_repo"
           },
           "devImports": [],
           "tags": [],
@@ -1155,6 +1157,28 @@
               "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:ppc\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_ppc64le//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:ppc\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_ppc64le//:jdk\",\n)\n"
             }
           },
+          "remotejdk21_linux_s390x_toolchain_config_repo": {
+            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
+            "ruleClassName": "_toolchain_config",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk21_linux_s390x_toolchain_config_repo",
+              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:s390x\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_linux_s390x//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:s390x\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_linux_s390x//:jdk\",\n)\n"
+            }
+          },
+          "remotejdk21_linux_s390x": {
+            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
+            "ruleClassName": "http_archive",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk21_linux_s390x",
+              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
+              "sha256": "0d5676c50821e0d0b951bf3ffd717e7a13be2a89d8848a5c13b4aedc6f982c78",
+              "strip_prefix": "jdk-21.0.2+13",
+              "urls": [
+                "https://mirror.bazel.build/github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.2%2B13/OpenJDK21U-jdk_s390x_linux_hotspot_21.0.2_13.tar.gz",
+                "https://github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.2%2B13/OpenJDK21U-jdk_s390x_linux_hotspot_21.0.2_13.tar.gz"
+              ]
+            }
+          },
           "remotejdk17_win_arm64": {
             "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
             "ruleClassName": "http_archive",
diff --git a/third_party/BUILD b/third_party/BUILD
index b7a75a1..e03e524 100644
--- a/third_party/BUILD
+++ b/third_party/BUILD
@@ -474,9 +474,10 @@ genrule(
         "//src/conditions:linux_aarch64": ["@maven//:io_netty_netty_tcnative_boringssl_static_linux_aarch_64_file"],
         "//src/conditions:linux_x86_64": ["@maven//:io_netty_netty_tcnative_boringssl_static_linux_x86_64_file"],
         "//src/conditions:windows": ["@maven//:io_netty_netty_tcnative_boringssl_static_windows_x86_64_file"],
+	"//src/conditions:linux_s390x": ["netty-tcnative-boringssl-static-2.0.61.Final-linux-s390_64.jar"],
         "//conditions:default": [],
     }),
-    outs = ["netty_tcnative/netty-tcnative-filtered.jar"],
+    outs = ["netty-tcnative-filtered.jar"],
     cmd = "cp $< $@ && " +
           # Make sure we can write the output file, even if the input isn't writable.
           "chmod +w $@ && " +
@@ -487,48 +488,39 @@ distrib_java_import(
     name = "netty",
     enable_distributions = ["debian"],
     jars = [
-        "@maven//:io_netty_netty_buffer_file",
-        "@maven//:io_netty_netty_codec_file",
-        "@maven//:io_netty_netty_codec_http2_file",
-        "@maven//:io_netty_netty_codec_http_file",
-        "@maven//:io_netty_netty_common_file",
-        "@maven//:io_netty_netty_handler_file",
-        "@maven//:io_netty_netty_handler_proxy_file",
-        "@maven//:io_netty_netty_resolver_file",
-        "@maven//:io_netty_netty_resolver_dns_file",
-        "@maven//:io_netty_netty_transport_file",
-        "@maven//:io_netty_netty_transport_classes_epoll_file",
-        "@maven//:io_netty_netty_transport_classes_kqueue_file",
-    ] + select({
-        "//src/conditions:darwin_arm64": ["@maven//:io_netty_netty_transport_native_unix_common_osx_aarch_64_file"],
-        "//src/conditions:darwin_x86_64": ["@maven//:io_netty_netty_transport_native_unix_common_osx_x86_64_file"],
-        "//src/conditions:linux_aarch64": ["@maven//:io_netty_netty_transport_native_unix_common_linux_aarch_64_file"],
-        "//src/conditions:linux_x86_64": ["@maven//:io_netty_netty_transport_native_unix_common_linux_x86_64_file"],
-        "//conditions:default": ["@maven//:io_netty_netty_transport_native_unix_common_file"],
-    }) + select({
-        "//src/conditions:darwin_arm64": ["@maven//:io_netty_netty_transport_native_kqueue_osx_aarch_64_file"],
-        "//src/conditions:darwin_x86_64": ["@maven//:io_netty_netty_transport_native_kqueue_osx_x86_64_file"],
-        "//conditions:default": [],
-    }) + select({
-        "//src/conditions:linux_aarch64": ["@maven//:io_netty_netty_transport_native_epoll_linux_aarch_64_file"],
-        "//src/conditions:linux_x86_64": ["@maven//:io_netty_netty_transport_native_epoll_linux_x86_64_file"],
-        "//conditions:default": [],
-    }),
+        "netty-buffer-4.1.93.Final.jar",
+        "netty-codec-4.1.93.Final.jar",
+        "netty-codec-http-4.1.93.Final.jar",
+        "netty-codec-http2-4.1.93.Final.jar",
+        "netty-common-4.1.93.Final.jar",
+        "netty-handler-4.1.93.Final.jar",
+        "netty-handler-proxy-4.1.93.Final.jar",
+        "netty-resolver-4.1.93.Final.jar",
+        "netty-resolver-dns-4.1.93.Final.jar",
+        "netty-transport-4.1.93.Final.jar",
+        "netty-transport-classes-epoll-4.1.93.Final.jar",
+        "netty-transport-classes-kqueue-4.1.93.Final.jar",
+        "netty-transport-native-unix-common-4.1.93.Final-linux-s390_64.jar",
+        "netty-transport-native-kqueue-4.1.93.Final.jar",
+        "netty-transport-native-epoll-4.1.93.Final-linux-s390_64.jar",
+    ]
 )
 
 distrib_java_import(
     name = "netty_tcnative",
     enable_distributions = ["debian"],
     jars = [
-        "@maven//:io_netty_netty_tcnative_classes_file",
+	"netty-tcnative-classes-2.0.61.Final.jar",
     ] + select({
         "//src/conditions:darwin_arm64": [":netty_tcnative/netty-tcnative-filtered.jar"],
         "//src/conditions:darwin_x86_64": [":netty_tcnative/netty-tcnative-filtered.jar"],
         "//src/conditions:linux_aarch64": [":netty_tcnative/netty-tcnative-filtered.jar"],
         "//src/conditions:linux_x86_64": [":netty_tcnative/netty-tcnative-filtered.jar"],
         "//src/conditions:windows": [":netty_tcnative/netty-tcnative-filtered.jar"],
+	"//src/conditions:linux_s390x": ["netty-tcnative-filtered.jar"],
         "//conditions:default": [],
     }),
+
 )
 
 alias(
diff --git a/src/test/py/bazel/bzlmod/bazel_module_test.py b/src/test/py/bazel/bzlmod/bazel_module_test.py
index aa101db72e..17b369a881 100644
--- a/src/test/py/bazel/bzlmod/bazel_module_test.py
+++ b/src/test/py/bazel/bzlmod/bazel_module_test.py
@@ -794,6 +794,11 @@ class BazelModuleTest(test_base.TestBase):
     self.ScratchFile(
         'MODULE.bazel',
         [
+            'bazel_dep(name = "rules_java", version = "")',
+            'local_path_override(',
+            '    module_name = "rules_java",',
+            '    path = "RULES_JAVA_ROOT_PATH/rules_java",',
+            ')',
             (
                 'http_jar ='
                 ' use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl",'
