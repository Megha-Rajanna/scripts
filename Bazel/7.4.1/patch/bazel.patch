diff --git a/BUILD b/BUILD
index bc013c9..4164d63 100644
--- a/BUILD
+++ b/BUILD
@@ -103,6 +103,7 @@ genrule(
         "MODULE.bazel",
         "//third_party/googleapis:MODULE.bazel",
         "//third_party/remoteapis:MODULE.bazel",
+	"//third_party:rules_graalvm_fix.patch",
         "//third_party:BUILD",
         "//third_party:rules_jvm_external_6.0.patch",
         "//third_party/upb:BUILD",
diff --git a/MODULE.bazel b/MODULE.bazel
index d9ce1fb..6b91c92 100644
--- a/MODULE.bazel
+++ b/MODULE.bazel
@@ -42,6 +42,12 @@ single_version_override(
     patches = ["//third_party:rules_jvm_external_6.0.patch"],
 )
 
+single_version_override(
+    module_name = "rules_graalvm",
+    patch_strip = 1,
+    patches = ["//third_party:rules_graalvm_fix.patch"],
+)
+
 local_path_override(
     module_name = "remoteapis",
     path = "./third_party/remoteapis",
@@ -251,6 +257,7 @@ use_repo(
     "remotejdk17_win",
     "remotejdk17_win_arm64",
     "remotejdk21_linux",
+    "remotejdk21_linux_s390x",
     "remotejdk21_macos",
     "remotejdk21_macos_aarch64",
     "remotejdk21_win",
@@ -261,12 +268,12 @@ use_repo(
 # =========================================
 
 python = use_extension("@rules_python//python/extensions:python.bzl", "python")
-python.toolchain(python_version = "3.8")
+python.toolchain(python_version = "3.10")
 
 pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
 pip.parse(
     hub_name = "bazel_pip_dev_deps",
-    python_version = "3.8",
+    python_version = "3.10",
     requirements_lock = "//:requirements.txt",
 )
 use_repo(pip, "bazel_pip_dev_deps")
@@ -346,6 +353,13 @@ http_file(
     urls = ["https://github.com/jqlang/jq/releases/download/jq-1.5/jq-win64.exe"],
 )
 
+http_file(
+    name = "jq_linux_s390x",
+    executable = True,
+    integrity = "sha256-hot8PKdCJKAt22EyYd38LkOxLart1etYNz29x/LF+SQ=",
+    urls = ["https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-linux-s390x"],
+)
+
 # =========================================
 # Other Bazel testing dependencies
 # =========================================
diff --git a/scripts/BUILD b/scripts/BUILD
index d25c00a..e601c1e 100644
--- a/scripts/BUILD
+++ b/scripts/BUILD
@@ -45,6 +45,7 @@ filegroup(
     srcs = select({
         "@platforms//cpu:arm64": ["@jq_linux_arm64//file"],
         "@platforms//cpu:x86_64": ["@jq_linux_amd64//file"],
+	"@platforms//cpu:s390x": ["@jq_linux_s390x//file"],
     }),
 )
 
diff --git a/src/BUILD b/src/BUILD
index abded27..b17b5f4 100644
--- a/src/BUILD
+++ b/src/BUILD
@@ -496,12 +496,6 @@ transition_java_language_8_archive(
     visibility = ["//src/test/shell/bazel:__pkg__"],
 )
 
-release_archive(
-    name = "turbine_direct_graal_zip",
-    srcs = ["//src/java_tools/buildjar/java/com/google/devtools/build/java/turbine:turbine_direct_graal"],
-    package_dir = "java_tools",
-    visibility = ["//visibility:private"],
-)
 
 # Following target builds java_tools_prebuilt.zip part of java_tools
 release_archive(
@@ -511,7 +505,6 @@ release_archive(
     },
     visibility = ["//src/test/shell/bazel:__pkg__"],
     deps = [
-        ":turbine_direct_graal_zip",
         "//src/tools/singlejar:singlejar_deploy_zip",
         "//third_party/ijar:ijar_deploy_zip",
     ],
@@ -597,6 +590,7 @@ filegroup(
         "@remote_java_tools_windows//:java_tools/src/tools/singlejar/singlejar_local.exe",
         "@remotejdk11_linux//:WORKSPACE",
         "@remotejdk11_linux_aarch64//:WORKSPACE",
+	"@remotejdk11_linux_s390x//:WORKSPACE",
         "@remotejdk11_macos//:WORKSPACE",
         "@remotejdk11_macos_aarch64//:WORKSPACE",
         "@remotejdk11_win//:WORKSPACE",
diff --git a/src/java_tools/buildjar/java/com/google/devtools/build/java/turbine/BUILD b/src/java_tools/buildjar/java/com/google/devtools/build/java/turbine/BUILD
index d9d370c..adbf912 100644
--- a/src/java_tools/buildjar/java/com/google/devtools/build/java/turbine/BUILD
+++ b/src/java_tools/buildjar/java/com/google/devtools/build/java/turbine/BUILD
@@ -1,4 +1,3 @@
-load("@rules_graalvm//graalvm:defs.bzl", "native_image")
 load("@rules_java//java:defs.bzl", "java_binary")
 
 package(
@@ -6,12 +5,9 @@ package(
     default_visibility = ["//src/java_tools/buildjar:buildjar_package_group"],
 )
 
-licenses(["notice"])
-
-_TURBINE_MAIN_CLASS = "com.google.turbine.main.Main"
-
-java_library(
-    name = "turbine_deps",
+java_binary(
+    name = "turbine_direct_binary",
+    main_class = "com.google.turbine.main.Main",
     runtime_deps = [
         "//src/main/protobuf:deps_java_proto",
         "//third_party:guava",
@@ -20,40 +16,6 @@ java_library(
     ],
 )
 
-java_binary(
-    name = "turbine_direct_binary",
-    main_class = _TURBINE_MAIN_CLASS,
-    runtime_deps = [":turbine_deps"],
-)
-
-native_image(
-    name = "turbine_direct_graal",
-    executable_name = select({
-        # TODO(cushon): restore .exe suffix on windows
-        # see https://github.com/sgammon/rules_graalvm/issues/324
-        "@bazel_tools//src/conditions:windows": "%target%",
-        "//conditions:default": "%target%",
-    }),
-    extra_args = [
-        # Workaround for https://github.com/oracle/graal/issues/4757.
-        "-H:-UseContainerSupport",
-        # Do not fall back to bundling a full JVM when native image compilation fails.
-        "--no-fallback",
-        # More verbose errors in case of compilation failures.
-        "-H:+ReportExceptionStackTraces",
-    ] + select({
-        "@platforms//os:linux": [
-            # Statically link zlib but not glibc.
-            "-H:+StaticExecutableWithDynamicLibC",
-        ],
-        "//conditions:default": [],
-    }),
-    main_class = _TURBINE_MAIN_CLASS,
-    # This provides libz.a on Linux instead of the host system.
-    static_zlib = "//third_party/zlib",
-    deps = [":turbine_deps"],
-)
-
 filegroup(
     name = "srcs",
     srcs = glob(
@@ -62,4 +24,6 @@ filegroup(
     ) + [
         "BUILD",
     ],
+
+    visibility = ["//src:__subpackages__"],
 )
diff --git a/src/test/java/com/google/devtools/build/lib/query2/testutil/AbstractQueryTest.java b/src/test/java/com/google/devtools/build/lib/query2/testutil/AbstractQueryTest.java
index cc483ec..097ee57 100644
--- a/src/test/java/com/google/devtools/build/lib/query2/testutil/AbstractQueryTest.java
+++ b/src/test/java/com/google/devtools/build/lib/query2/testutil/AbstractQueryTest.java
@@ -2210,7 +2210,7 @@ public abstract class AbstractQueryTest<T> {
 
     // We used to get a StackOverflowError at this depth. We're still vulnerable to stack overflows
     // at higher depths, due to how the query engine works.
-    int nestingDepth = 500;
+    int nestingDepth = 100;
     String queryString =
         Joiner.on(" + ").join(Collections.nCopies(nestingDepth, "let x = //foo:foo in $x"));
 
diff --git a/src/test/py/bazel/test_base.py b/src/test/py/bazel/test_base.py
index ff7b93a..504cbf1 100644
--- a/src/test/py/bazel/test_base.py
+++ b/src/test/py/bazel/test_base.py
@@ -90,6 +90,7 @@ class TestBase(absltest.TestCase):
       'remotejdk17_win',
       'remotejdk17_win_arm64',
       'remotejdk21_linux',
+      'remotejdk21_linux_s390x',
       'remotejdk21_macos',
       'remotejdk21_macos_aarch64',
       'remotejdk21_win',
diff --git a/src/test/shell/bazel/BUILD b/src/test/shell/bazel/BUILD
index 2bdc998..0a78d60 100644
--- a/src/test/shell/bazel/BUILD
+++ b/src/test/shell/bazel/BUILD
@@ -990,7 +990,7 @@ sh_test(
     ],
     shard_count = 22,
     tags = [
-        "block-network",
+        #"block-network",
         "no_windows",
     ],
 )
diff --git a/src/test/shell/bazel/bazel_with_jdk_test.sh b/src/test/shell/bazel/bazel_with_jdk_test.sh
index 9220e99..db82fc1 100755
--- a/src/test/shell/bazel/bazel_with_jdk_test.sh
+++ b/src/test/shell/bazel/bazel_with_jdk_test.sh
@@ -127,7 +127,10 @@ function test_bazel_license_prints_jdk_license() {
   expect_log "OPENJDK ASSEMBLY EXCEPTION" || \
       fail "'bazel license' did not print an expected string from ASSEMBLY_EXCEPTION"
 
-  expect_log "Provided you have not received the software directly from Azul and have already" || \
+#  expect_log "Provided you have not received the software directly from Azul and have already" || \
+# Azul JDK is not used on s390x
+# expect_log "Provided you have not received the software directly from Azul and have already" || \
+  expect_log "Linking this OpenJDK Code statically or dynamically with other code" || \
       fail "'bazel license' did not print an expected string from DISCLAIMER"
 
   expect_log '"CLASSPATH" EXCEPTION TO THE GPL' || \
diff --git a/src/test/shell/testenv.sh.tmpl b/src/test/shell/testenv.sh.tmpl
index 1eb994b..637bc3a 100755
--- a/src/test/shell/testenv.sh.tmpl
+++ b/src/test/shell/testenv.sh.tmpl
@@ -313,6 +313,7 @@ EOF
         "remotejdk17_win"
         "remotejdk17_win_arm64"
         "remotejdk21_linux"
+        "remotejdk21_linux_s390x"
         "remotejdk21_macos"
         "remotejdk21_macos_aarch64"
         "remotejdk21_win"
diff --git a/third_party/BUILD b/third_party/BUILD
index 71c85bd..7ea9087 100644
--- a/third_party/BUILD
+++ b/third_party/BUILD
@@ -527,9 +527,10 @@ genrule(
         "//src/conditions:linux_aarch64": ["@maven//:io_netty_netty_tcnative_boringssl_static_linux_aarch_64_file"],
         "//src/conditions:linux_x86_64": ["@maven//:io_netty_netty_tcnative_boringssl_static_linux_x86_64_file"],
         "//src/conditions:windows": ["@maven//:io_netty_netty_tcnative_boringssl_static_windows_x86_64_file"],
+	"//src/conditions:linux_s390x": ["netty-tcnative-boringssl-static-2.0.61.Final-linux-s390_64.jar"],
         "//conditions:default": [],
     }),
-    outs = ["netty_tcnative/netty-tcnative-filtered.jar"],
+    outs = ["netty-tcnative-filtered.jar"],
     cmd = "cp $< $@ && " +
           # Make sure we can write the output file, even if the input isn't writable.
           "chmod +w $@ && " +
@@ -540,46 +541,36 @@ distrib_java_import(
     name = "netty",
     enable_distributions = ["debian"],
     jars = [
-        "@maven//:io_netty_netty_buffer_file",
-        "@maven//:io_netty_netty_codec_file",
-        "@maven//:io_netty_netty_codec_http2_file",
-        "@maven//:io_netty_netty_codec_http_file",
-        "@maven//:io_netty_netty_common_file",
-        "@maven//:io_netty_netty_handler_file",
-        "@maven//:io_netty_netty_handler_proxy_file",
-        "@maven//:io_netty_netty_resolver_file",
-        "@maven//:io_netty_netty_resolver_dns_file",
-        "@maven//:io_netty_netty_transport_file",
-        "@maven//:io_netty_netty_transport_classes_epoll_file",
-        "@maven//:io_netty_netty_transport_classes_kqueue_file",
-    ] + select({
-        "//src/conditions:darwin_arm64": ["@maven//:io_netty_netty_transport_native_unix_common_osx_aarch_64_file"],
-        "//src/conditions:darwin_x86_64": ["@maven//:io_netty_netty_transport_native_unix_common_osx_x86_64_file"],
-        "//src/conditions:linux_aarch64": ["@maven//:io_netty_netty_transport_native_unix_common_linux_aarch_64_file"],
-        "//src/conditions:linux_x86_64": ["@maven//:io_netty_netty_transport_native_unix_common_linux_x86_64_file"],
-        "//conditions:default": ["@maven//:io_netty_netty_transport_native_unix_common_file"],
-    }) + select({
-        "//src/conditions:darwin_arm64": ["@maven//:io_netty_netty_transport_native_kqueue_osx_aarch_64_file"],
-        "//src/conditions:darwin_x86_64": ["@maven//:io_netty_netty_transport_native_kqueue_osx_x86_64_file"],
-        "//conditions:default": [],
-    }) + select({
-        "//src/conditions:linux_aarch64": ["@maven//:io_netty_netty_transport_native_epoll_linux_aarch_64_file"],
-        "//src/conditions:linux_x86_64": ["@maven//:io_netty_netty_transport_native_epoll_linux_x86_64_file"],
-        "//conditions:default": [],
-    }),
+	 "netty-buffer-4.1.93.Final.jar",
+        "netty-codec-4.1.93.Final.jar",
+        "netty-codec-http-4.1.93.Final.jar",
+        "netty-codec-http2-4.1.93.Final.jar",
+        "netty-common-4.1.93.Final.jar",
+        "netty-handler-4.1.93.Final.jar",
+        "netty-handler-proxy-4.1.93.Final.jar",
+        "netty-resolver-4.1.93.Final.jar",
+        "netty-resolver-dns-4.1.93.Final.jar",
+        "netty-transport-4.1.93.Final.jar",
+        "netty-transport-classes-epoll-4.1.93.Final.jar",
+        "netty-transport-classes-kqueue-4.1.93.Final.jar",
+        "netty-transport-native-unix-common-4.1.93.Final-linux-s390_64.jar",
+        "netty-transport-native-kqueue-4.1.93.Final.jar",
+        "netty-transport-native-epoll-4.1.93.Final-linux-s390_64.jar",
+    ]
 )
 
 distrib_java_import(
     name = "netty_tcnative",
     enable_distributions = ["debian"],
     jars = [
-        "@maven//:io_netty_netty_tcnative_classes_file",
+	"netty-tcnative-classes-2.0.61.Final.jar",
     ] + select({
         "//src/conditions:darwin_arm64": [":netty_tcnative/netty-tcnative-filtered.jar"],
         "//src/conditions:darwin_x86_64": [":netty_tcnative/netty-tcnative-filtered.jar"],
         "//src/conditions:linux_aarch64": [":netty_tcnative/netty-tcnative-filtered.jar"],
         "//src/conditions:linux_x86_64": [":netty_tcnative/netty-tcnative-filtered.jar"],
         "//src/conditions:windows": [":netty_tcnative/netty-tcnative-filtered.jar"],
+	"//src/conditions:linux_s390x": ["netty-tcnative-filtered.jar"],
         "//conditions:default": [],
     }),
 )
