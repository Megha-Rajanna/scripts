diff --git a/falcosecurity-libs-repo/falcosecurity-libs-prefix/src/falcosecurity-libs/userspace/libsinsp/filter_compare.cpp b/falcosecurity-libs-repo/falcosecurity-libs-prefix/src/falcosecurity-libs/userspace/libsinsp/filter_compare.cpp
index 1e10864fcb..4c2b49151f 100644
--- a/falcosecurity-libs-repo/falcosecurity-libs-prefix/src/falcosecurity-libs/userspace/libsinsp/filter_compare.cpp
+++ b/falcosecurity-libs-repo/falcosecurity-libs-prefix/src/falcosecurity-libs/userspace/libsinsp/filter_compare.cpp
@@ -583,9 +583,25 @@ bool flt_compare_ipv6net(cmpop op, const ipv6addr* operand1, const ipv6net* oper
 // flt_cast takes a pointer to memory, dereferences it as fromT type and casts it
 // to a compatible toT type
 template<class fromT, class toT>
-static inline toT flt_cast(const void* ptr) {
-	fromT val;
-	memcpy(&val, ptr, sizeof(fromT));
+static inline toT flt_cast(const void* ptr, uint32_t len) {
+	fromT val{};
+	/*
+	 * In big endian systems, we need to
+	 * make sure that we copy the right bytes
+	 * when len > sizeof(fromT).
+	 * This is an edge case that should only happen
+	 * for `evt.rawarg.*` fields.
+	 */
+	uint8_t shift = 0;
+#ifdef __s390x__
+	// NOTE: c++20 has `constexpr (std::endian::native == std::endian::big)`
+	// that would be much better.
+	// To avoid perf hit, only compile this on s390x (our only big-endian supported arch).
+	if(len > sizeof(fromT)) {
+		shift = len - sizeof(fromT);
+	}
+#endif
+	memcpy(&val, (uint8_t*)ptr + shift, sizeof(fromT));
 
 	return static_cast<toT>(val);
 }
@@ -607,56 +623,56 @@ bool flt_compare(cmpop op,
 	switch(type) {
 	case PT_INT8:
 		return flt_compare_numeric<int64_t>(op,
-		                                    flt_cast<int8_t, int64_t>(operand1),
-		                                    flt_cast<int8_t, int64_t>(operand2));
+		                                    flt_cast<int8_t, int64_t>(operand1, op1_len),
+		                                    flt_cast<int8_t, int64_t>(operand2, op2_len));
 	case PT_INT16:
 		return flt_compare_numeric<int64_t>(op,
-		                                    flt_cast<int16_t, int64_t>(operand1),
-		                                    flt_cast<int16_t, int64_t>(operand2));
+		                                    flt_cast<int16_t, int64_t>(operand1, op1_len),
+		                                    flt_cast<int16_t, int64_t>(operand2, op2_len));
 	case PT_INT32:
 		return flt_compare_numeric<int64_t>(op,
-		                                    flt_cast<int32_t, int64_t>(operand1),
-		                                    flt_cast<int32_t, int64_t>(operand2));
+		                                    flt_cast<int32_t, int64_t>(operand1, op1_len),
+		                                    flt_cast<int32_t, int64_t>(operand2, op2_len));
 	case PT_INT64:
 	case PT_FD:
 	case PT_PID:
 	case PT_ERRNO:
 		return flt_compare_numeric<int64_t>(op,
-		                                    flt_cast<int64_t, int64_t>(operand1),
-		                                    flt_cast<int64_t, int64_t>(operand2));
+		                                    flt_cast<int64_t, int64_t>(operand1, op1_len),
+		                                    flt_cast<int64_t, int64_t>(operand2, op2_len));
 	case PT_FLAGS8:
 	case PT_ENUMFLAGS8:
 	case PT_UINT8:
 	case PT_SIGTYPE:
 		return flt_compare_numeric<uint64_t>(op,
-		                                     flt_cast<uint8_t, uint64_t>(operand1),
-		                                     flt_cast<uint8_t, uint64_t>(operand2));
+		                                     flt_cast<uint8_t, uint64_t>(operand1, op1_len),
+		                                     flt_cast<uint8_t, uint64_t>(operand2, op2_len));
 	case PT_FLAGS16:
 	case PT_UINT16:
 	case PT_ENUMFLAGS16:
 	case PT_PORT:
 	case PT_SYSCALLID:
 		return flt_compare_numeric<uint64_t>(op,
-		                                     flt_cast<uint16_t, uint64_t>(operand1),
-		                                     flt_cast<uint16_t, uint64_t>(operand2));
+		                                     flt_cast<uint16_t, uint64_t>(operand1, op1_len),
+		                                     flt_cast<uint16_t, uint64_t>(operand2, op2_len));
 	case PT_UINT32:
 	case PT_FLAGS32:
 	case PT_ENUMFLAGS32:
 	case PT_MODE:
 		return flt_compare_numeric<uint64_t>(op,
-		                                     flt_cast<uint32_t, uint64_t>(operand1),
-		                                     flt_cast<uint32_t, uint64_t>(operand2));
+		                                     flt_cast<uint32_t, uint64_t>(operand1, op1_len),
+		                                     flt_cast<uint32_t, uint64_t>(operand2, op2_len));
 	case PT_BOOL:
 		return flt_compare_bool(op,
-		                        flt_cast<uint32_t, uint64_t>(operand1),
-		                        flt_cast<uint32_t, uint64_t>(operand2));
+		                        flt_cast<uint32_t, uint64_t>(operand1, op1_len),
+		                        flt_cast<uint32_t, uint64_t>(operand2, op2_len));
 	case PT_IPV4ADDR:
 		if(op2_len != sizeof(struct in_addr)) {
 			return op == CO_NE;
 		}
 		return flt_compare_ipv4addr(op,
-		                            flt_cast<uint32_t, uint64_t>(operand1),
-		                            flt_cast<uint32_t, uint64_t>(operand2));
+		                            flt_cast<uint32_t, uint64_t>(operand1, op1_len),
+		                            flt_cast<uint32_t, uint64_t>(operand2, op2_len));
 	case PT_IPV4NET:
 		if(op2_len != sizeof(ipv4net)) {
 			return op == CO_NE;
@@ -706,8 +722,8 @@ bool flt_compare(cmpop op,
 	case PT_RELTIME:
 	case PT_ABSTIME:
 		return flt_compare_numeric<uint64_t>(op,
-		                                     flt_cast<uint64_t, uint64_t>(operand1),
-		                                     flt_cast<uint64_t, uint64_t>(operand2));
+		                                     flt_cast<uint64_t, uint64_t>(operand1, op1_len),
+		                                     flt_cast<uint64_t, uint64_t>(operand2, op2_len));
 	case PT_CHARBUF:
 	case PT_FSPATH:
 	case PT_FSRELPATH:
@@ -716,8 +732,8 @@ bool flt_compare(cmpop op,
 		return flt_compare_buffer(op, (char*)operand1, (char*)operand2, op1_len, op2_len);
 	case PT_DOUBLE:
 		return flt_compare_numeric<double>(op,
-		                                   flt_cast<double, double>(operand1),
-		                                   flt_cast<double, double>(operand2));
+		                                   flt_cast<double, double>(operand1, op1_len),
+		                                   flt_cast<double, double>(operand2, op2_len));
 	default:
 		ASSERT(false);
 		return false;

From 60345cb4f3aac24c768fc420af705230f46e9265 Mon Sep 17 00:00:00 2001
From: Federico Di Pierro <nierro92@gmail.com>
Date: Wed, 9 Apr 2025 10:28:52 +0200
Subject: [PATCH 2/3] fix(userspace/libsinsp): avoid copying past end of data
 bytes.

Another edge case of `evt.rawarg.*` fields.

Signed-off-by: Federico Di Pierro <nierro92@gmail.com>
---
 userspace/libsinsp/filter_compare.cpp | 13 ++++++++++++-
 1 file changed, 12 insertions(+), 1 deletion(-)

diff --git a/falcosecurity-libs-repo/falcosecurity-libs-prefix/src/falcosecurity-libs/userspace/libsinsp/filter_compare.cpp b/falcosecurity-libs-repo/falcosecurity-libs-prefix/src/falcosecurity-libs/userspace/libsinsp/filter_compare.cpp
index 4c2b49151f..a42d7dff23 100644
--- a/falcosecurity-libs-repo/falcosecurity-libs-prefix/src/falcosecurity-libs/userspace/libsinsp/filter_compare.cpp
+++ b/falcosecurity-libs-repo/falcosecurity-libs-prefix/src/falcosecurity-libs/userspace/libsinsp/filter_compare.cpp
@@ -601,7 +601,18 @@ static inline toT flt_cast(const void* ptr, uint32_t len) {
 		shift = len - sizeof(fromT);
 	}
 #endif
-	memcpy(&val, (uint8_t*)ptr + shift, sizeof(fromT));
+
+	/*
+	 * Another fix for `evt.rawarg.*` fields:
+	 * it can happen that we evaluated eg: `evt.rawarg.flags` to be uin16_t at filter compile time,
+	 * but then when we extract from event, we expect an uint32_t.
+	 * Without this check, we would try to copy 4B of data while our ptr only holds 2B of data.
+	 */
+	size_t size = sizeof(fromT);
+	if(len > 0 && len < size) {
+		size = len;
+	}
+	memcpy(&val, (uint8_t*)ptr + shift, size);
 
 	return static_cast<toT>(val);
 }

From 8902219b4a7ebdcd8e4ebb5269b184a8d469836c Mon Sep 17 00:00:00 2001
From: Federico Di Pierro <nierro92@gmail.com>
Date: Thu, 10 Apr 2025 09:14:24 +0200
Subject: [PATCH 3/3] chore(userspace/libsinsp): update rawarg_madness test
 testing the memcpy past end of data issue.

Signed-off-by: Federico Di Pierro <nierro92@gmail.com>
---
 userspace/libsinsp/test/filterchecks/evt.cpp | 23 ++++++++++++++++++++
 1 file changed, 23 insertions(+)

diff --git a/falcosecurity-libs-repo/falcosecurity-libs-prefix/src/falcosecurity-libs/userspace/libsinsp/test/filterchecks/evt.cpp b/falcosecurity-libs-repo/falcosecurity-libs-prefix/src/falcosecurity-libs/userspace/libsinsp/test/filterchecks/evt.cpp
index 8bafb79292..b3794e88ed 100644
--- a/falcosecurity-libs-repo/falcosecurity-libs-prefix/src/falcosecurity-libs/userspace/libsinsp/test/filterchecks/evt.cpp
+++ b/falcosecurity-libs-repo/falcosecurity-libs-prefix/src/falcosecurity-libs/userspace/libsinsp/test/filterchecks/evt.cpp
@@ -255,6 +255,29 @@ TEST_F(sinsp_with_test_input, EVT_FILTER_rawarg_madness) {
 	// UINT64_MAX is FFFFFFFFFFFFFFFF
 	ASSERT_EQ(get_field_as_string(evt, "evt.rawarg.addr"), "FFFFFFFFFFFFFFFF");
 	ASSERT_ANY_THROW(eval_filter(evt, "evt.rawarg.addr > 0"));  // PT_SOCKADDR is not comparable
+
+	/*
+	 * Now test the bugged case where `find_longest_matching_evt_param` returns a size,
+	 * but then real event has a size that is bigger than that.
+	 * In this case, `find_longest_matching_evt_param` will find `size` param
+	 * from PPME_SYSCALL_READ_E, that is {"size", PT_UINT32, PF_DEC},
+	 * but then we call evt.rawarg.size on a PPME_SYSCALL_SPLICE_E,
+	 * whose `size` param is 64bit: {"size", PT_UINT64, PF_DEC}.
+	 */
+	// [PPME_SYSCALL_SPLICE_E] = {"splice", EC_IO_OTHER | EC_SYSCALL, EF_USES_FD, 4, {
+	//	{"fd_in", PT_FD, PF_DEC}, {"fd_out", PT_FD, PF_DEC}, {"size", PT_UINT64, PF_DEC}, {
+	//		"flags", PT_FLAGS32, PF_HEX, splice_flags}}}
+	evt = add_event_advance_ts(increasing_ts(),
+	                           1,
+	                           PPME_SYSCALL_SPLICE_E,
+	                           4,
+	                           (int64_t)-1,
+	                           (int64_t)-1,
+	                           (uint64_t)512,
+	                           (uint32_t)0);
+	// Size is PF_DEC, 512 is 512
+	ASSERT_EQ(get_field_as_string(evt, "evt.rawarg.size"), "512");
+	ASSERT_TRUE(eval_filter(evt, "evt.rawarg.size < 515"));
 }
 
 TEST_F(sinsp_with_test_input, EVT_FILTER_thread_proc_info) {
