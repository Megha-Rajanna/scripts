diff --git a/userspace/libsinsp/test/ifinfo.ut.cpp b/userspace/libsinsp/test/ifinfo.ut.cpp
index 9aa8695c3..6b51bb81b 100644
--- a/userspace/libsinsp/test/ifinfo.ut.cpp
+++ b/userspace/libsinsp/test/ifinfo.ut.cpp
@@ -26,7 +26,11 @@ static uint32_t parse_ipv4_addr(const char *dotted_notation)
 {
 	uint32_t a, b, c, d;
 	sscanf(dotted_notation, "%d.%d.%d.%d", &a, &b, &c, &d);
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
 	return d << 24 | c << 16 | b << 8 | a;
+#else
+	return d | c << 8 | b << 16 | a << 24;
+#endif
 }
 
 static uint32_t parse_ipv4_netmask(const char *dotted_notation)
@@ -56,6 +60,7 @@ static sinsp_ipv4_ifinfo make_ipv4_localhost()
 
 static void convert_to_string(char* dest, size_t len, uint32_t addr)
 {
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
 	snprintf(
 		dest,
 		len,
@@ -64,6 +69,16 @@ static void convert_to_string(char* dest, size_t len, uint32_t addr)
 		((addr & 0xFF00) >> 8),
 		((addr & 0xFF0000) >> 16),
 		((addr & 0xFF000000) >> 24));
+#else
+	snprintf(
+		dest,
+		len,
+		"%d.%d.%d.%d",
+		((addr >> 24)  & 0xFF),
+		((addr >> 16) & 0xFF),
+		((addr >> 8) & 0xFF),
+		(addr & 0xFF));
+#endif
 }
 
 #define EXPECT_ADDR_EQ(dotted_notation,addr) {\
diff --git a/userspace/libsinsp/test/parsers/parse_connect.cpp b/userspace/libsinsp/test/parsers/parse_connect.cpp
index 6d4b895e3..bfd549c4b 100644
--- a/userspace/libsinsp/test/parsers/parse_connect.cpp
+++ b/userspace/libsinsp/test/parsers/parse_connect.cpp
@@ -75,9 +75,15 @@ TEST_F(sinsp_with_test_input, CONNECT_parse_unix_socket)
 	ASSERT_EQ(fdinfo->get_l4proto(), scap_l4_proto::SCAP_L4_NA);
 	ASSERT_TRUE(fdinfo->is_role_client());
 	ASSERT_TRUE(fdinfo->is_socket_connected());
+	std::string expected_unix_tuple = "";
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
+	expected_unix_tuple = "9c758d0f->9c758d0a /tmp/stream.sock";
+#else
+	expected_unix_tuple = "f8d759c00000000->a8d759c00000000 /tmp/stream.sock";
+#endif
 	// Note: `9c758d0f` is the kernel pointer to the socket that performs the connection.
 	// `9c758d0a` is the kernel pointer to the socket that receives the connection.
-	ASSERT_EQ(fdinfo->m_name, "9c758d0f->9c758d0a /tmp/stream.sock");
+	ASSERT_EQ(fdinfo->m_name, expected_unix_tuple);
 	// we don't have code to populate this `m_name_raw` for sockets.
 	ASSERT_EQ(fdinfo->m_name_raw, "");
 
@@ -88,7 +94,7 @@ TEST_F(sinsp_with_test_input, CONNECT_parse_unix_socket)
 	ASSERT_EQ(fdinfo->get_l4proto(), scap_l4_proto::SCAP_L4_NA);
 	ASSERT_TRUE(fdinfo->is_role_client());
 	ASSERT_TRUE(fdinfo->is_socket_connected());
-	ASSERT_EQ(fdinfo->m_name, "9c758d0f->9c758d0a /tmp/stream.sock");
+	ASSERT_EQ(fdinfo->m_name, expected_unix_tuple);
 	ASSERT_EQ(fdinfo->m_name_raw, "");
 }
 
